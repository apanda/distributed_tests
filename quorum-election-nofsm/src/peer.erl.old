-module(peer).

-define(ROUND_TIMEOUT_MIN, 500).
-define(ROUND_TIMEOUT_MAX, 5000).

-define(VOTE_TIMEOUT, 50).
-define(KEEP_ALIVE_TIME, 250).

-export([start_system/2]).

-spec (start_system([term()], {integer(), integer(), integer()}) -> none()).
start_system(Peers, Seed) ->
  rand:seed(Seed),
  initial(Peers, 0).

initial(Peers, Round) ->
  ElectionTimeout = rand:uniform(?ROUND_TIMEOUT_MAX - ?ROUND_TIMEOUT_MIN) + ?ROUND_TIMEOUT_MIN,
  receive
    {vote_request, From, IncomingRound} ->
        io:format("~p Received a vote_request from ~p for ~p~n", [self(), From, IncomingRound]),
        maybe_follow(From, IncomingRound, Peers, Round)
    after ElectionTimeout ->
        io:format("~p becoming a candidate~n", [self()]),
        request_votes(Peers, Round + 1)
  end.

request_votes(Peers, Round) ->
  io:format("~p starting an election for round ~p~n", [self(), Peers]),
  lists:map(fun(P) -> P ! {vote_request, self(), Round} end, Peers).

maybe_follow(From, IncomingRound, Peers, Round) when IncomingRound >= Round ->
  From ! {vote_for_round, self(), IncomingRound}, 
  wait_for_election_end(From, Peers, IncomingRound).

wait_for_election_end(From, Peers, Round) ->
  Pid = self(),
  receive
    {vote_for_round, Pid, _NRound} ->
      wait_for_election_end(From, Peers, Round);
    {leader, Ldr, IRound} when IRound >= Round ->
      % Someone won the election either for this round or a new round.
      io:format("~p thinks ~p is leader for round ~p~n", [self(), Ldr, Round]),
      follower(Ldr, Peers, Round);
    {leader, Ldr, IRound} when IRound < Round ->
      % Old message.
      io:format("~p received declaration ~p is leader for round ~p too late~n", [self(), Ldr, Round]),
      wait_for_election_end(From, Peers, Round); 
    {vote_request, NFrom, IRound} when NFrom =/= From; Round =< IRound ->
      % Someone requests a vote for a round we have already voted for. 
      io:format("~p Received a vote_request from ~p for ~p (LATE)~n", [self(), NFrom, IRound]),
      NFrom ! {vote_against_round, self(), IRound},
      wait_for_election_end(From, Peers, Round);
    {vote_request, NFrom, IRound} when IRound > Round ->
      io:format("~p Received a vote_request from ~p for ~p (new round)~n", [self(), NFrom, IRound]),
      % A request for a new round
      maybe_follow(NFrom, IRound, Peers, Round)
    after ?VOTE_TIMEOUT ->
      io:format("~p becoming a candidate~n", [self()]),
      % Too much time has passed, let us enter the fray.
      request_votes(Peers, Round + 1)
  end.

follower(Leader, Peers, Round) ->
  Pid = self(),
  receive
    {vote_for_round, Pid, _NRound} ->
      follower(Leader, Peers, Round);
    {leader, Leader, NRound} when NRound > Round ->
      io:format("~p thinks ~p is leader for round ~p~n", [self(), Leader, NRound]),
      follower(Leader, Peers, NRound);
    {leader, Leader, NRound} when NRound =< Round ->
      io:format("~p thinks ~p is leader for round ~p (LATE) ~n", [self(), Leader, NRound]),
      follower(Leader, Peers, Round);
    {leader, NLeader, NRound} when NRound > Round ->
      io:format("Change in leadership ~p thinks ~p is leader for round ~p~n", [self(), NLeader, NRound]),
      follower(NLeader, Peers, NRound);
    {leader, NLeader, NRound} when NRound < Round ->
      io:format("Change in leadership ~p thinks ~p is leader for round ~p (LATE)~n", [self(), NLeader, NRound]),
      follower(Leader, Peers, Round);
    {leader, NLeader, NRound} when NRound =:= Round ->
      io:format("Conflicting leadership ~p ~p ~p ~p ~n", [self(), Leader, NLeader, Round]),
      erlang:error(leader_conflict);
    {vote_request, NFrom, IRound} when Round =< IRound ->
      % Someone requests a vote for a round we have already acknowledged a leader for 
      NFrom ! {vote_against_round, self(), IRound},
      follower(Leader, Peers, Round);
    {vote_request, NFrom, IRound} when IRound > Round ->
      % A request for a new round
      maybe_follow(NFrom, IRound, Peers, Round)
    after ?KEEP_ALIVE_TIME ->
      initial(Peers, Round + 1)
  end.
